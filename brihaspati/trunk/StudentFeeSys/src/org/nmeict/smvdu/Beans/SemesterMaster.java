package org.nmeict.smvdu.Beans;
// Generated Apr 11, 2013 4:42:25 PM by Hibernate Tools 3.2.1.GA


import java.util.ArrayList;
import java.util.Date;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.RequestScoped;
import javax.faces.component.UIData;
import javax.faces.context.FacesContext;
import javax.faces.event.ValueChangeEvent;
import javax.faces.model.SelectItem;

import org.nmeict.smvdu.Beans.SpringClassFile.ISemesterDetailsService;
import org.nmeict.smvdu.Beans.SpringClassFile.SemesterDetailsService;
import org.nmeict.smvdu.HibernateHelper.OrgProfileSessionDetails;

@ManagedBean(name="semesterBeans")
@RequestScoped
/**
 * SemesterMaster generated by hbm2java
 */
public class SemesterMaster  implements java.io.Serializable {


     private Integer semSeqNo;
     private ExamCodeSetUp examCodeSetUp;
     private OrgProfile orgProfile;
     private OrgDepartmentType orgDepartmentType;
     private DegreeType degreeType;
     private String semesterName;
     private String semCreaterId;
     private Date semCreaterDate;
     private Set otherFeeHeadMasters = new HashSet(0);
     private Set studentRegMasters = new HashSet(0);
     private Set studentMasters = new HashSet(0);
     
     
     
     
     
     
     private SemesterMaster semDetails;
     private Integer eCode;
     private Integer departmentCode;
     private Integer degreeCode;
     private Integer examCode;
     private String departmentName;
     private String degreeName;
     private String examCodeName;
     private String branchMaster;
     private Integer bmSeqNo;
     private Date semesterBegningDate;
     private Date semesterEndingDate;
     private UIData dataGrid;
     private List<SemesterMaster> loadAllSemesterDetails = new ArrayList<SemesterMaster>();
     private ISemesterDetailsService iSemesterDetailsService= new SemesterDetailsService();
     private int sCode;
     
     
     private SelectItem[] items;
     
     public String getExamCodeName() {
		return examCodeName;
	}
     public SemesterMaster() {
     }

     public SemesterMaster(ExamCodeSetUp examCodeSetUp, OrgProfile orgProfile, OrgDepartmentType orgDepartmentType, DegreeType degreeType, String semesterName, String semCreaterId, Date semCreaterDate, Set studentRegMasters, Set studentMasters, Set otherFeeHeadMasters) {
        this.examCodeSetUp = examCodeSetUp;
        this.orgProfile = orgProfile;
        this.orgDepartmentType = orgDepartmentType;
        this.degreeType = degreeType;
        this.semesterName = semesterName;
        this.semCreaterId = semCreaterId;
        this.semCreaterDate = semCreaterDate;
        this.studentRegMasters = studentRegMasters;
        this.studentMasters = studentMasters;
        this.otherFeeHeadMasters = otherFeeHeadMasters;
     }
        public Integer getSemSeqNo() {
        return this.semSeqNo;
    }
    
    public void setSemSeqNo(Integer semSeqNo) {
        this.semSeqNo = semSeqNo;
    }
    public ExamCodeSetUp getExamCodeSetUp() {
        return this.examCodeSetUp;
    }
    
    public void setExamCodeSetUp(ExamCodeSetUp examCodeSetUp) {
        this.examCodeSetUp = examCodeSetUp;
    }
    public OrgProfile getOrgProfile() {
        return this.orgProfile;
    }
    
    public void setOrgProfile(OrgProfile orgProfile) {
        this.orgProfile = orgProfile;
    }
    public OrgDepartmentType getOrgDepartmentType() {
        return this.orgDepartmentType;
    }
    
    public void setOrgDepartmentType(OrgDepartmentType orgDepartmentType) {
        this.orgDepartmentType = orgDepartmentType;
    }
    public DegreeType getDegreeType() {
        return this.degreeType;
    }
    
    public void setDegreeType(DegreeType degreeType) {
        this.degreeType = degreeType;
    }
    public String getSemesterName() {
        return this.semesterName;
    }
    
    public void setSemesterName(String semesterName) {
        this.semesterName = semesterName;
    }
    public String getSemCreaterId() {
        return this.semCreaterId;
    }
    
    public void setSemCreaterId(String semCreaterId) {
        this.semCreaterId = semCreaterId;
    }
    public Date getSemCreaterDate() {
        return this.semCreaterDate;
    }
    
    public void setSemCreaterDate(Date semCreaterDate) {
        this.semCreaterDate = semCreaterDate;
    }

    
    
    
    
	public Set getStudentRegMasters() {
		return studentRegMasters;
	}
	public void setStudentRegMasters(Set studentRegMasters) {
		this.studentRegMasters = studentRegMasters;
	}
	public Integer getDepartmentCode() {
		return departmentCode;
	}

	public Set getOtherFeeHeadMasters() {
		return otherFeeHeadMasters;
	}
	
	public void setOtherFeeHeadMasters(Set otherFeeHeadMasters) {
		this.otherFeeHeadMasters = otherFeeHeadMasters;
	}
	public Set getStudentMasters() {
		return studentMasters;
	}
	public void setStudentMasters(Set studentMasters) {
		this.studentMasters = studentMasters;
	}
	public void setDepartmentCode(Integer departmentCode) {
		this.departmentCode = departmentCode;
	}

	public Integer getDegreeCode() {
		return degreeCode;
	}

	public void setDegreeCode(Integer degreeCode) {
		this.degreeCode = degreeCode;
	}

	public Integer getExamCode() {
		return examCode;
	}

	public void setExamCode(Integer examCode) {
		this.examCode = examCode;
	}

	
	public ISemesterDetailsService getiSemesterDetailsService() {
		return iSemesterDetailsService;
	}

	public String getDepartmentName() {
		return departmentName;
	}

	public void setDepartmentName(String departmentName) {
		this.departmentName = departmentName;
	}

	public String getDegreeName() {
		return degreeName;
	}

	public void setDegreeName(String degreeName) {
		this.degreeName = degreeName;
	}

	public Date getSemesterBegningDate() {
		return semesterBegningDate;
	}

	public void setSemesterBegningDate(Date semesterBegningDate) {
		this.semesterBegningDate = semesterBegningDate;
	}

	public Date getSemesterEndingDate() {
		return semesterEndingDate;
	}

	public void setSemesterEndingDate(Date semesterEndingDate) {
		this.semesterEndingDate = semesterEndingDate;
	}

	public void setiSemesterDetailsService(
			ISemesterDetailsService iSemesterDetailsService) {
		this.iSemesterDetailsService = iSemesterDetailsService;
	}

	public List<SemesterMaster> getLoadAllSemesterDetails() {
		loadAllSemesterDetails = getiSemesterDetailsService().loadAllSemesterDetails(sCode);
		dataGrid.setValue(loadAllSemesterDetails);
		return loadAllSemesterDetails;
	}

	public void setLoadAllSemesterDetails(
			List<SemesterMaster> loadAllSemesterDetails) {
		this.loadAllSemesterDetails = loadAllSemesterDetails;
	}

	
	public UIData getDataGrid() {
		return dataGrid;
	}
	
	
	
	
	public String getBranchMaster() {
		return branchMaster;
	}
	public void setBranchMaster(String branchMaster) {
		this.branchMaster = branchMaster;
	}
	public Integer getBmSeqNo() {
		return bmSeqNo;
	}
	public void setBmSeqNo(Integer bmSeqNo) {
		this.bmSeqNo = bmSeqNo;
	}
	public Integer geteCode() {
		return eCode;
	}
	public void seteCode(Integer eCode) {
		this.eCode = eCode;
	}
	
	
	public void semesterCode(ValueChangeEvent event)
	{
		sCode=0;
		if((Object)event.getNewValue()!=null)
		{
			sCode = (Integer)event.getNewValue();
		}
		else
		{
			sCode=0;
			
		}
	}
	public SelectItem[] getItems() {
		List<SemesterMaster> semCode = getiSemesterDetailsService().loadAllSemesterDetails(sCode);
		items = new SelectItem[semCode.size()];
		for(int i=0;i<semCode.size();i++)
		{
			SemesterMaster dt = semCode.get(i);
			SelectItem si = new SelectItem(dt.getSemSeqNo(),dt.getSemesterName()); 
			items[i] = si;
		}
		return items;
	}
	public void setItems(SelectItem[] items) {
		this.items = items;
	}
	public void setDataGrid(UIData dataGrid) {
		this.dataGrid = dataGrid;
	}

	public void setExamCodeName(String examCodeName) {
		this.examCodeName = examCodeName;
	}
	
	

	public SemesterMaster getSemDetails() {
		return semDetails;
	}
	public void setSemDetails(SemesterMaster semDetails) {
		this.semDetails = semDetails;
	}
	//public void saveSemester()
        public String saveSemester()
	{
		try
		{
                    //System.out.println("\n\n\n=========11111111");
                    FacesContext fc = FacesContext.getCurrentInstance();
                    FacesMessage message = null;
                    if(this.getSemesterName().isEmpty()){
                        message = new FacesMessage();
                        message.setSeverity(FacesMessage.SEVERITY_ERROR);
                        message.setSummary("Please Enter Semester Name. It Cann't  be Empty.");
                        //message.setDetail("Degree Doesn't Exist in Selected Department.");
                        fc.addMessage("", message);
                        return null;
                    }
                     
                     
                    if(this.getDepartmentCode() == 0 ){
                        message = new FacesMessage();
                        message.setSeverity(FacesMessage.SEVERITY_ERROR);
                        message.setSummary("Please Slect Department Name. It Cann't  be Empty.");
                        //message.setDetail("Degree Doesn't Exist in Selected Department.");
                        fc.addMessage("", message);
                        return null; 
                    }
                    
                    if(this.getDegreeCode() == 0 ){
                        message = new FacesMessage();
                        message.setSeverity(FacesMessage.SEVERITY_ERROR);
                        message.setSummary("Please Slect Degree Name. It Cann't  be Empty.");
                        //message.setDetail("Degree Doesn't Exist in Selected Department.");
                        fc.addMessage("", message);
                        return null; 
                    }
                    
                    if(this.geteCode() == 0 ){
                        message = new FacesMessage();
                        message.setSeverity(FacesMessage.SEVERITY_ERROR);
                        message.setSummary("Please Slect Exam Session Name. It Cann't  be Empty.");
                        //message.setDetail("Degree Doesn't Exist in Selected Department.");
                        fc.addMessage("", message);
                        return null; 
                    }
                    
			OrgProfile op = new OrgProfile();
			OrgDepartmentType odt = new OrgDepartmentType();
			ExamCodeSetUp ecs = new ExamCodeSetUp();
			DegreeType dt = new DegreeType();
			op.setOrgId(new OrgProfileSessionDetails().getOrgProfileSession().getOrgId());
                       
			odt.setOdtSeqNo(this.getDepartmentCode()); 
			dt.setSeqNo(this.getDegreeCode());
			ecs.setSeqNo(this.geteCode());
			//System.out.println("\n\n\n========="+this.getDepartmentCode()+" : "+this.getDegreeCode()+" : "+this.geteCode());
			this.setOrgProfile(op);
			this.setExamCodeSetUp(ecs);
			this.setDegreeType(dt);
			this.setOrgDepartmentType(odt);
			this.setSemCreaterId(new OrgProfileSessionDetails().getOrgProfileSession().getOrgAdminemailid());
			this.setSemCreaterDate(new Date());
			getiSemesterDetailsService().addAllSemester(this);
			//FacesContext.getCurrentInstance().addMessage("", new FacesMessage(FacesMessage.SEVERITY_INFO, ""+semesterName+" : Saved Successfully", ""));
                        return "SemesterDetails.xhtml?faces-redirect=true";
                        //System.out.println("\n\n\n=========22222");
		}
		catch(Exception ex)
		{
			FacesContext.getCurrentInstance().addMessage("", new FacesMessage(FacesMessage.SEVERITY_ERROR, ""+ex, ""));
                        return null;
		}
	}
	public void update()
	{
		try
		{
			List<SemesterMaster> semMaster = (ArrayList<SemesterMaster>) dataGrid.getValue(); 
			getiSemesterDetailsService().update(semMaster); 
			FacesContext.getCurrentInstance().addMessage("", new FacesMessage(FacesMessage.SEVERITY_INFO, "Updated Successfully", ""));
		}
		catch(Exception ex)
		{
			FacesContext.getCurrentInstance().addMessage("", new FacesMessage(FacesMessage.SEVERITY_ERROR, ""+ex, ""));	
		}
	}

        public String delete(SemesterMaster semesterMasterParam){
            try{
                System.out.print("Smemeter================Delete");
                List<SemesterMaster> semMasterList = (ArrayList<SemesterMaster>) dataGrid.getValue(); 
                System.out.print("Smemeter================Size="+semMasterList.size());
                for(SemesterMaster sm : semMasterList ){
                    if(sm.getSemesterName().equalsIgnoreCase(semesterMasterParam.getSemesterName()) && sm.getSemesterBegningDate().equals(semesterMasterParam.getSemesterBegningDate())&& sm.getSemesterEndingDate().equals(semesterMasterParam.getSemesterEndingDate())){
                        getiSemesterDetailsService().deleteSemester(semesterMasterParam); 
                        break;
                    }
                }
                return "SemesterDetails.xhtml?faces-redirect=true";
        }
            catch(Exception ex){
                FacesContext.getCurrentInstance().addMessage("", new FacesMessage(FacesMessage.SEVERITY_ERROR, "Semeter Couldnt Delete."+ex, ""));
                return null;
            }
        }

}


