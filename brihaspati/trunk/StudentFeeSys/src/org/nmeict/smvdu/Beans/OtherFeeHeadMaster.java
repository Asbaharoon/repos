package org.nmeict.smvdu.Beans;
// Generated Apr 11, 2013 7:52:20 PM by Hibernate Tools 3.2.1.GA


import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.faces.application.FacesMessage;

import javax.faces.bean.ManagedBean;
import javax.faces.bean.RequestScoped;
import javax.faces.component.UIData;
import javax.faces.context.FacesContext;
import javax.faces.model.SelectItem;

import org.nmeict.smvdu.Beans.SpringClassFile.IOrgOtherFeeHeadMasterService;
import org.nmeict.smvdu.Beans.SpringClassFile.OrgOtherFeeHeadMasterService;
import org.nmeict.smvdu.HibernateHelper.OrgProfileSessionDetails;

@ManagedBean (name="otherFeeHead")
@RequestScoped
/**
 * OtherFeeHeadMaster generated by hbm2java
 */
public class OtherFeeHeadMaster  implements java.io.Serializable {


     private Integer feeHeadCode;
     private OrgProfile orgProfile;
     private OrgDepartmentType orgDepartmentType;
     private DegreeType degreeType;
     private SemesterMaster semesterMaster;
     private BranchMaster branchMaster;
     private String feeHeadName;
     private double feeHeadValue;
     private String programId;
     private byte payableStatus;
     private Set scholarshipTypes = new HashSet(0);
     private Set studentMasters = new HashSet(0);
     
     
     
     
     
     private Integer semCode;
     private Integer departmentCode;
     private Integer degreeCode;
     private Integer examCode;
     private Integer branchCode;
     private String branchName;
     private String departmentName;
     private String degreeName;
     private String examCodeName;
     private String semesterName;
     private UIData dataGrid;
     private List<OtherFeeHeadMaster> loadAllFeeHead = new ArrayList<OtherFeeHeadMaster>();
     private IOrgOtherFeeHeadMasterService iOrgOtherFeeHeadMasterService = new OrgOtherFeeHeadMasterService();
     private SelectItem[] items;
     
     
     public OtherFeeHeadMaster() {
     }
     public OtherFeeHeadMaster(OrgProfile orgProfile, DegreeType degreeType, String feeHeadName, double feeHeadValue, byte payableStatus) {
         this.orgProfile = orgProfile;
         this.degreeType = degreeType;
         this.feeHeadName = feeHeadName;
         this.feeHeadValue = feeHeadValue;
         this.payableStatus = payableStatus;
     }
     public OtherFeeHeadMaster(OrgProfile orgProfile, OrgDepartmentType orgDepartmentType, DegreeType degreeType, SemesterMaster semesterMaster, BranchMaster branchMaster, String feeHeadName, double feeHeadValue, String programId, byte payableStatus, Set scholarshipTypes, Set studentMasters) {
        this.orgProfile = orgProfile;
        this.orgDepartmentType = orgDepartmentType;
        this.degreeType = degreeType;
        this.semesterMaster = semesterMaster;
        this.branchMaster = branchMaster;
        this.feeHeadName = feeHeadName;
        this.feeHeadValue = feeHeadValue;
        this.programId = programId;
        this.payableStatus = payableStatus;
        this.scholarshipTypes = scholarshipTypes;
        this.studentMasters = studentMasters;
     }
        public Integer getFeeHeadCode() {
        return this.feeHeadCode;
    }
    
    public void setFeeHeadCode(Integer feeHeadCode) {
        this.feeHeadCode = feeHeadCode;
    }
    public OrgProfile getOrgProfile() {
        return this.orgProfile;
    }
    
    public void setOrgProfile(OrgProfile orgProfile) {
        this.orgProfile = orgProfile;
    }
    public OrgDepartmentType getOrgDepartmentType() {
        return this.orgDepartmentType;
    }
    
    public void setOrgDepartmentType(OrgDepartmentType orgDepartmentType) {
        this.orgDepartmentType = orgDepartmentType;
    }
    public DegreeType getDegreeType() {
        return this.degreeType;
    }
    
    public void setDegreeType(DegreeType degreeType) {
        this.degreeType = degreeType;
    }
    public SemesterMaster getSemesterMaster() {
        return this.semesterMaster;
    }
    
    public void setSemesterMaster(SemesterMaster semesterMaster) {
        this.semesterMaster = semesterMaster;
    }
    public BranchMaster getBranchMaster() {
        return this.branchMaster;
    }
    
    public void setBranchMaster(BranchMaster branchMaster) {
        this.branchMaster = branchMaster;
    }
    public String getFeeHeadName() {
        return this.feeHeadName;
    }
    
    public void setFeeHeadName(String feeHeadName) {
        this.feeHeadName = feeHeadName;
    }
    public double getFeeHeadValue() {
        return this.feeHeadValue;
    }
    
    public void setFeeHeadValue(double feeHeadValue) {
        this.feeHeadValue = feeHeadValue;
    }
    public String getProgramId() {
        return this.programId;
    }
    
    
    public void setProgramId(String programId) {
        this.programId = programId;
    }
    public Set getStudentMasters() {
		return studentMasters;
	}
	public void setStudentMasters(Set studentMasters) {
		this.studentMasters = studentMasters;
	}
	public byte getPayableStatus() {
        return this.payableStatus;
    }
    
    public void setPayableStatus(byte payableStatus) {
        this.payableStatus = payableStatus;
    }
    public Set getScholarshipTypes() {
        return this.scholarshipTypes;
    }
    
    public void setScholarshipTypes(Set scholarshipTypes) {
        this.scholarshipTypes = scholarshipTypes;
    }


	public Integer getSemCode() {
		return semCode;
	}


	public void setSemCode(Integer semCode) {
		this.semCode = semCode;
	}


	public Integer getDepartmentCode() {
		return departmentCode;
	}


	public void setDepartmentCode(Integer departmentCode) {
		this.departmentCode = departmentCode;
	}


	public Integer getDegreeCode() {
		return degreeCode;
	}

	

	public Integer getBranchCode() {
		return branchCode;
	}


	public void setBranchCode(Integer branchCode) {
		this.branchCode = branchCode;
	}


	public String getBranchName() {
		return branchName;
	}


	public void setBranchName(String branchName) {
		this.branchName = branchName;
	}


	public void setDegreeCode(Integer degreeCode) {
		this.degreeCode = degreeCode;
	}


	public Integer getExamCode() {
		return examCode;
	}


	public void setExamCode(Integer examCode) {
		this.examCode = examCode;
	}


	public String getDepartmentName() {
		return departmentName;
	}


	public void setDepartmentName(String departmentName) {
		this.departmentName = departmentName;
	}


	public String getDegreeName() {
		return degreeName;
	}


	public void setDegreeName(String degreeName) {
		this.degreeName = degreeName;
	}


	public String getExamCodeName() {
		return examCodeName;
	}


	public void setExamCodeName(String examCodeName) {
		this.examCodeName = examCodeName;
	}


	
	public UIData getDataGrid() {
		return dataGrid;
	}


	public String getSemesterName() {
		return semesterName;
	}


	
	public void setSemesterName(String semesterName) {
		this.semesterName = semesterName;
	}


	public SelectItem[] getItems() {
		List<OtherFeeHeadMaster> feeCode = getiOrgOtherFeeHeadMasterService().loadOtherFeeHeadCode();
		items = new SelectItem[feeCode.size()];
		for(int i=0;i<feeCode.size();i++)
		{
			OtherFeeHeadMaster dt = feeCode.get(i);
			SelectItem si = new SelectItem(dt.getFeeHeadCode(),dt.getFeeHeadName());
			items[i] = si;
		}
		return items;
	}
	public void setItems(SelectItem[] items) {
		this.items = items;
	}
	public void setDataGrid(UIData dataGrid) {
		this.dataGrid = dataGrid;
	}


	public List<OtherFeeHeadMaster> getLoadAllFeeHead() {
		loadAllFeeHead = getiOrgOtherFeeHeadMasterService().loadOtherFeeHeadCode();
		dataGrid.setValue(loadAllFeeHead);
		return loadAllFeeHead;
	}


	public void setLoadAllFeeHead(List<OtherFeeHeadMaster> loadAllFeeHead) {
		this.loadAllFeeHead = loadAllFeeHead;
	}


	public IOrgOtherFeeHeadMasterService getiOrgOtherFeeHeadMasterService() {
		return iOrgOtherFeeHeadMasterService;
	}


	public void setiOrgOtherFeeHeadMasterService(
			IOrgOtherFeeHeadMasterService iOrgOtherFeeHeadMasterService) {
		this.iOrgOtherFeeHeadMasterService = iOrgOtherFeeHeadMasterService;
	}

    
	public String saveFeeHead()
	{
                FacesContext fc = FacesContext.getCurrentInstance();
                String page = ""; 
                FacesMessage message = null;
                if( (this.getFeeHeadName().matches("^[a-zA-Z\\s]*$") == false ) || this.getFeeHeadName().equals("") ){
                    message = new FacesMessage();
                    message.setSeverity(FacesMessage.SEVERITY_ERROR);
                    message.setSummary("Plz Enter Valid Fee Head Name");
                    //message.setDetail("First Name Must Be At Least Three Charecter ");
                    fc.addMessage("", message);
                    return null; 
                }
                
                if( this.getProgramId().matches("^[a-z0-9A-Z\\s]*$") == false ){
                    message = new FacesMessage();
                    message.setSeverity(FacesMessage.SEVERITY_ERROR);
                    message.setSummary("Plz Enter Program ID,  ");
                    //message.setDetail("First Name Must Be At Least Three Charecter ");
                    fc.addMessage("", message);
                    return null; 
                }
                
                if(getFeeHeadValue() <= 0.0){
                    message = new FacesMessage();
                    message.setSeverity(FacesMessage.SEVERITY_ERROR);
                    message.setSummary("Plz Enter Fee Head Value greater than zero");
                    //message.setDetail("First Name Must Be At Least Three Charecter ");
                    fc.addMessage("", message);
                    return null;  
                    
                }
                List<OtherFeeHeadMaster> otherFeeHeadMasterList = (ArrayList<OtherFeeHeadMaster>) dataGrid.getValue();
                boolean bl = false;
                for(OtherFeeHeadMaster fhm : otherFeeHeadMasterList){
                    if( fhm.getDepartmentCode().equals(this.getDepartmentCode())
                        && fhm.getDegreeCode().equals(this.getDegreeCode())
                        && fhm.getBranchCode().equals(this.getBranchCode())
                        && fhm.getSemCode().equals(this.getSemCode())
                        && fhm.getFeeHeadName().equalsIgnoreCase(this.getFeeHeadName()) ){
                                                   
                                bl = true;
                                break;
                        }
                    }
                    if(bl){
                        
                        message = new FacesMessage();
                        message.setSeverity(FacesMessage.SEVERITY_ERROR);
                        message.setSummary("Fee Head already exist.");
                        fc.addMessage("", message);
                        return null;  
                       }  
                try{
                        this.setFeeHeadName(this.getFeeHeadName().toUpperCase());
                        OrgProfile op = new OrgProfile();
                        OrgDepartmentType odt = new OrgDepartmentType();
                        DegreeType dt = new DegreeType();
                        SemesterMaster sm = new SemesterMaster();
                        BranchMaster bm = new BranchMaster();
                        op.setOrgId(new OrgProfileSessionDetails().getOrgProfileSession().getOrgId());
                        odt.setOdtSeqNo(this.getDepartmentCode());
                        dt.setSeqNo(this.getDegreeCode());
                        sm.setSemSeqNo(this.getSemCode());
                        bm.setBmSeqNo(this.getBranchCode());
                        this.setOrgProfile(op);
                        this.setOrgDepartmentType(odt);
                        this.setDegreeType(dt);
                        this.setSemesterMaster(sm);
                        this.setBranchMaster(bm);
                        getiOrgOtherFeeHeadMasterService().addNewFeeHeadCode(this);
                        return "FeeHeadsDetails.xhtml?faces-redirect=true";
                }
                catch(Exception e){
                    
                    FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Fee head did not insert", ""));
                    return null;
                }
	}

	public void update()
	{
            try{
                List<OtherFeeHeadMaster> otherFeeHead = (ArrayList<OtherFeeHeadMaster>) dataGrid.getValue();
                getiOrgOtherFeeHeadMasterService().updateOtherFeeHeadCode(otherFeeHead);
                FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Fee heads are updated successfully.", ""));
                
            }
            catch(Exception e){
                FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Fee head did not insert", ""));
            }
	}
        
        public String deleteFeeHeads(OtherFeeHeadMaster fhmParam){
            System.out.print(fhmParam);
            boolean blMsg = false;
            String page = "";
            List<OtherFeeHeadMaster> otherFeeHeadMasterList = (ArrayList<OtherFeeHeadMaster>) dataGrid.getValue();
             for(OtherFeeHeadMaster fhm : otherFeeHeadMasterList){
                 if(fhm.equals(fhmParam)){
                    System.out.println("START of OtherFeeHeadMaster class in Bean package DELETE_FeeHeads method==============yy");
                    OrgProfile op = new OrgProfile();
                    OrgDepartmentType odt = new OrgDepartmentType();
                    DegreeType dt = new DegreeType();
                    SemesterMaster sm = new SemesterMaster();
                    BranchMaster bm = new BranchMaster();
                    op.setOrgId(new OrgProfileSessionDetails().getOrgProfileSession().getOrgId());
                    odt.setOdtSeqNo(fhm.getDepartmentCode());
                    dt.setSeqNo(fhm.getDegreeCode());
                    sm.setSemSeqNo(fhm.getSemCode());
                    bm.setBmSeqNo(fhm.getBranchCode());
                    fhm.setOrgProfile(op);
                    fhm.setOrgDepartmentType(odt);
                    fhm.setDegreeType(dt);
                    fhm.setSemesterMaster(sm);
                    fhm.setBranchMaster(bm);
                    Exception ex = getiOrgOtherFeeHeadMasterService().deleteFeeHeadCode(fhm);
                    System.out.print("Exception..."+ex);
                    FacesContext context = FacesContext.getCurrentInstance();  
                    if(ex == null){
                        context.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_INFO, "Fee Head is  deleted successfully.", ""));
                        page = "FeeHeadsDetails.xhtml?faces-redirect=true";
                    }
                    else{
                        context.addMessage(null, new FacesMessage(FacesMessage.SEVERITY_ERROR, "Fee Head did not delete.", ""));
                        //page = "FeeHeadsDetails.xhtml?faces-redirect=true";
                        page = null;
                    }
                    break;
                }  //if 
                 
             } //for
                    
                    //System.out.println("End of OtherFeeHeadMaster class in Bean package DELETE_FeeHead method==============yy");
          return page;          
    }

}


