package org.iitk.livetv.om;


import java.math.BigDecimal;
import java.sql.Connection;
import java.util.ArrayList;
import java.util.Date;
import java.util.Collections;
import java.util.List;

import org.apache.commons.lang.ObjectUtils;
import org.apache.torque.TorqueException;
import org.apache.torque.om.BaseObject;
import org.apache.torque.om.ComboKey;
import org.apache.torque.om.DateKey;
import org.apache.torque.om.NumberKey;
import org.apache.torque.om.ObjectKey;
import org.apache.torque.om.SimpleKey;
import org.apache.torque.om.StringKey;
import org.apache.torque.om.Persistent;
import org.apache.torque.util.Criteria;
import org.apache.torque.util.Transaction;


/**
 * This class was autogenerated by Torque on:
 *
 * [Sat Dec 22 02:32:10 IST 2012]
 *
 * You should not use this class directly.  It should not even be
 * extended all references should be to User
 */
public abstract class BaseUser extends BaseObject
{
    /** The Peer class */
    private static final UserPeer peer =
        new UserPeer();

        
    /** The value for the userId field */
    private int userId;
      
    /** The value for the fullName field */
    private String fullName;
      
    /** The value for the username field */
    private String username;
      
    /** The value for the password field */
    private String password;
      
    /** The value for the emailId field */
    private String emailId;
      
    /** The value for the dateOfBirth field */
    private Date dateOfBirth;
      
    /** The value for the phoneNumber field */
    private String phoneNumber;
      
    /** The value for the address field */
    private String address;
      
    /** The value for the postcode field */
    private int postcode;
      
    /** The value for the city field */
    private String city;
      
    /** The value for the state field */
    private String state;
      
    /** The value for the country field */
    private String country;
                                  
    /** The value for the quota field */
    private BigDecimal quota= new BigDecimal(100);
                                                  
    /** The value for the createdOn field */
    private Date createdOn = new Date(20120120);
                                                  
    /** The value for the lastLogine field */
    private Date lastLogine = new Date(20120120);
  
    
    /**
     * Get the UserId
     *
     * @return int
     */
    public int getUserId()
    {
        return userId;
    }

                                              
    /**
     * Set the value of UserId
     *
     * @param v new value
     */
    public void setUserId(int v) throws TorqueException
    {
    
                  if (this.userId != v)
              {
            this.userId = v;
            setModified(true);
        }
    
          
                                  
        // update associated UserRole
        if (collUserRoles != null)
        {
            for (int i = 0; i < collUserRoles.size(); i++)
            {
                ((UserRole) collUserRoles.get(i))
                    .setUserId(v);
            }
        }
                      }
  
    /**
     * Get the FullName
     *
     * @return String
     */
    public String getFullName()
    {
        return fullName;
    }

                        
    /**
     * Set the value of FullName
     *
     * @param v new value
     */
    public void setFullName(String v) 
    {
    
                  if (!ObjectUtils.equals(this.fullName, v))
              {
            this.fullName = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Username
     *
     * @return String
     */
    public String getUsername()
    {
        return username;
    }

                        
    /**
     * Set the value of Username
     *
     * @param v new value
     */
    public void setUsername(String v) 
    {
    
                  if (!ObjectUtils.equals(this.username, v))
              {
            this.username = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Password
     *
     * @return String
     */
    public String getPassword()
    {
        return password;
    }

                        
    /**
     * Set the value of Password
     *
     * @param v new value
     */
    public void setPassword(String v) 
    {
    
                  if (!ObjectUtils.equals(this.password, v))
              {
            this.password = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the EmailId
     *
     * @return String
     */
    public String getEmailId()
    {
        return emailId;
    }

                        
    /**
     * Set the value of EmailId
     *
     * @param v new value
     */
    public void setEmailId(String v) 
    {
    
                  if (!ObjectUtils.equals(this.emailId, v))
              {
            this.emailId = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the DateOfBirth
     *
     * @return Date
     */
    public Date getDateOfBirth()
    {
        return dateOfBirth;
    }

                        
    /**
     * Set the value of DateOfBirth
     *
     * @param v new value
     */
    public void setDateOfBirth(Date v) 
    {
    
                  if (!ObjectUtils.equals(this.dateOfBirth, v))
              {
            this.dateOfBirth = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the PhoneNumber
     *
     * @return String
     */
    public String getPhoneNumber()
    {
        return phoneNumber;
    }

                        
    /**
     * Set the value of PhoneNumber
     *
     * @param v new value
     */
    public void setPhoneNumber(String v) 
    {
    
                  if (!ObjectUtils.equals(this.phoneNumber, v))
              {
            this.phoneNumber = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Address
     *
     * @return String
     */
    public String getAddress()
    {
        return address;
    }

                        
    /**
     * Set the value of Address
     *
     * @param v new value
     */
    public void setAddress(String v) 
    {
    
                  if (!ObjectUtils.equals(this.address, v))
              {
            this.address = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Postcode
     *
     * @return int
     */
    public int getPostcode()
    {
        return postcode;
    }

                        
    /**
     * Set the value of Postcode
     *
     * @param v new value
     */
    public void setPostcode(int v) 
    {
    
                  if (this.postcode != v)
              {
            this.postcode = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the City
     *
     * @return String
     */
    public String getCity()
    {
        return city;
    }

                        
    /**
     * Set the value of City
     *
     * @param v new value
     */
    public void setCity(String v) 
    {
    
                  if (!ObjectUtils.equals(this.city, v))
              {
            this.city = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the State
     *
     * @return String
     */
    public String getState()
    {
        return state;
    }

                        
    /**
     * Set the value of State
     *
     * @param v new value
     */
    public void setState(String v) 
    {
    
                  if (!ObjectUtils.equals(this.state, v))
              {
            this.state = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Country
     *
     * @return String
     */
    public String getCountry()
    {
        return country;
    }

                        
    /**
     * Set the value of Country
     *
     * @param v new value
     */
    public void setCountry(String v) 
    {
    
                  if (!ObjectUtils.equals(this.country, v))
              {
            this.country = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the Quota
     *
     * @return BigDecimal
     */
    public BigDecimal getQuota()
    {
        return quota;
    }

                        
    /**
     * Set the value of Quota
     *
     * @param v new value
     */
    public void setQuota(BigDecimal v) 
    {
    
                  if (!ObjectUtils.equals(this.quota, v))
              {
            this.quota = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the CreatedOn
     *
     * @return Date
     */
    public Date getCreatedOn()
    {
        return createdOn;
    }

                        
    /**
     * Set the value of CreatedOn
     *
     * @param v new value
     */
    public void setCreatedOn(Date v) 
    {
    
                  if (!ObjectUtils.equals(this.createdOn, v))
              {
            this.createdOn = v;
            setModified(true);
        }
    
          
              }
  
    /**
     * Get the LastLogine
     *
     * @return Date
     */
    public Date getLastLogine()
    {
        return lastLogine;
    }

                        
    /**
     * Set the value of LastLogine
     *
     * @param v new value
     */
    public void setLastLogine(Date v) 
    {
    
                  if (!ObjectUtils.equals(this.lastLogine, v))
              {
            this.lastLogine = v;
            setModified(true);
        }
    
          
              }
  
         
                                
            
    /**
     * Collection to store aggregation of collUserRoles
     */
    protected List collUserRoles;

    /**
     * Temporary storage of collUserRoles to save a possible db hit in
     * the event objects are add to the collection, but the
     * complete collection is never requested.
     */
    protected void initUserRoles()
    {
        if (collUserRoles == null)
        {
            collUserRoles = new ArrayList();
        }
    }

    /**
     * Method called to associate a UserRole object to this object
     * through the UserRole foreign key attribute
     *
     * @param l UserRole
     * @throws TorqueException
     */
    public void addUserRole(UserRole l) throws TorqueException
    {
        getUserRoles().add(l);
        l.setUser((User) this);
    }

    /**
     * The criteria used to select the current contents of collUserRoles
     */
    private Criteria lastUserRolesCriteria = null;

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getUserRoles(new Criteria())
     *
     * @throws TorqueException
     */
    public List getUserRoles() throws TorqueException
    {
        if (collUserRoles == null)
        {
            collUserRoles = getUserRoles(new Criteria(10));
        }
        return collUserRoles;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this User has previously
     * been saved, it will retrieve related UserRoles from storage.
     * If this User is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     *
     * @throws TorqueException
     */
    public List getUserRoles(Criteria criteria) throws TorqueException
    {
        if (collUserRoles == null)
        {
            if (isNew())
            {
               collUserRoles = new ArrayList();
            }
            else
            {
                      criteria.add(UserRolePeer.USER_ID, getUserId() );
                      collUserRoles = UserRolePeer.doSelect(criteria);
            }
        }
        else
        {
            // criteria has no effect for a new object
            if (!isNew())
            {
                // the following code is to determine if a new query is
                // called for.  If the criteria is the same as the last
                // one, just return the collection.
                      criteria.add(UserRolePeer.USER_ID, getUserId());
                      if (!lastUserRolesCriteria.equals(criteria))
                {
                    collUserRoles = UserRolePeer.doSelect(criteria);
                }
            }
        }
        lastUserRolesCriteria = criteria;

        return collUserRoles;
    }

    /**
     * If this collection has already been initialized, returns
     * the collection. Otherwise returns the results of
     * getUserRoles(new Criteria(),Connection)
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getUserRoles(Connection con) throws TorqueException
    {
        if (collUserRoles == null)
        {
            collUserRoles = getUserRoles(new Criteria(10), con);
        }
        return collUserRoles;
    }

    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this User has previously
     * been saved, it will retrieve related UserRoles from storage.
     * If this User is new, it will return
     * an empty collection or the current collection, the criteria
     * is ignored on a new object.
     * This method takes in the Connection also as input so that
     * referenced objects can also be obtained using a Connection
     * that is taken as input
     */
    public List getUserRoles(Criteria criteria, Connection con)
            throws TorqueException
    {
        if (collUserRoles == null)
        {
            if (isNew())
            {
               collUserRoles = new ArrayList();
            }
            else
            {
                       criteria.add(UserRolePeer.USER_ID, getUserId());
                       collUserRoles = UserRolePeer.doSelect(criteria, con);
             }
         }
         else
         {
             // criteria has no effect for a new object
             if (!isNew())
             {
                 // the following code is to determine if a new query is
                 // called for.  If the criteria is the same as the last
                 // one, just return the collection.
                       criteria.add(UserRolePeer.USER_ID, getUserId());
                       if (!lastUserRolesCriteria.equals(criteria))
                 {
                     collUserRoles = UserRolePeer.doSelect(criteria, con);
                 }
             }
         }
         lastUserRolesCriteria = criteria;

         return collUserRoles;
     }

                        
              
                    
                              
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this User is new, it will return
     * an empty collection; or if this User has previously
     * been saved, it will retrieve related UserRoles from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in User.
     */
    protected List getUserRolesJoinUser(Criteria criteria)
        throws TorqueException
    {
        if (collUserRoles == null)
        {
            if (isNew())
            {
               collUserRoles = new ArrayList();
            }
            else
            {
                            criteria.add(UserRolePeer.USER_ID, getUserId());
                            collUserRoles = UserRolePeer.doSelectJoinUser(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                        criteria.add(UserRolePeer.USER_ID, getUserId());
                        if (!lastUserRolesCriteria.equals(criteria))
            {
                collUserRoles = UserRolePeer.doSelectJoinUser(criteria);
            }
        }
        lastUserRolesCriteria = criteria;

        return collUserRoles;
    }
                  
                    
                    
                                
                                                              
                                        
                    
                    
          
    /**
     * If this collection has already been initialized with
     * an identical criteria, it returns the collection.
     * Otherwise if this User is new, it will return
     * an empty collection; or if this User has previously
     * been saved, it will retrieve related UserRoles from storage.
     *
     * This method is protected by default in order to keep the public
     * api reasonable.  You can provide public methods for those you
     * actually need in User.
     */
    protected List getUserRolesJoinRole(Criteria criteria)
        throws TorqueException
    {
        if (collUserRoles == null)
        {
            if (isNew())
            {
               collUserRoles = new ArrayList();
            }
            else
            {
                            criteria.add(UserRolePeer.USER_ID, getUserId());
                            collUserRoles = UserRolePeer.doSelectJoinRole(criteria);
            }
        }
        else
        {
            // the following code is to determine if a new query is
            // called for.  If the criteria is the same as the last
            // one, just return the collection.
            boolean newCriteria = true;
                        criteria.add(UserRolePeer.USER_ID, getUserId());
                        if (!lastUserRolesCriteria.equals(criteria))
            {
                collUserRoles = UserRolePeer.doSelectJoinRole(criteria);
            }
        }
        lastUserRolesCriteria = criteria;

        return collUserRoles;
    }
                            


          
     
    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
     *
     * @throws Exception
     */
    public void save() throws Exception
    {
          save(UserPeer.getMapBuilder()
                .getDatabaseMap().getName());
      }

    /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.
       * Note: this code is here because the method body is
     * auto-generated conditionally and therefore needs to be
     * in this file instead of in the super class, BaseObject.
       *
     * @param dbName
     * @throws TorqueException
     */
    public void save(String dbName) throws TorqueException
    {
        Connection con = null;
          try
        {
            con = Transaction.begin(dbName);
            save(con);
            Transaction.commit(con);
        }
        catch(TorqueException e)
        {
            Transaction.safeRollback(con);
            throw e;
        }
      }

      /** flag to prevent endless save loop, if this object is referenced
        by another object which falls in this transaction. */
    private boolean alreadyInSave = false;
      /**
     * Stores the object in the database.  If the object is new,
     * it inserts it; otherwise an update is performed.  This method
     * is meant to be used as part of a transaction, otherwise use
     * the save() method and the connection details will be handled
     * internally
     *
     * @param con
     * @throws TorqueException
     */
    public void save(Connection con) throws TorqueException
    {
          if (!alreadyInSave)
        {
            alreadyInSave = true;


  
            // If this object has been modified, then save it to the database.
            if (isModified())
            {
                if (isNew())
                {
                    UserPeer.doInsert((User) this, con);
                    setNew(false);
                }
                else
                {
                    UserPeer.doUpdate((User) this, con);
                }
            }

                                      
                
            if (collUserRoles != null)
            {
                for (int i = 0; i < collUserRoles.size(); i++)
                {
                    ((UserRole) collUserRoles.get(i)).save(con);
                }
            }
                          alreadyInSave = false;
        }
      }


                          
      /**
     * Set the PrimaryKey using ObjectKey.
     *
     * @param  userId ObjectKey
     */
    public void setPrimaryKey(ObjectKey key)
        throws TorqueException
    {
            setUserId(((NumberKey) key).intValue());
        }

    /**
     * Set the PrimaryKey using a String.
     *
     * @param key
     */
    public void setPrimaryKey(String key) throws TorqueException
    {
            setUserId(Integer.parseInt(key));
        }

  
    /**
     * returns an id that differentiates this object from others
     * of its class.
     */
    public ObjectKey getPrimaryKey()
    {
          return SimpleKey.keyFor(getUserId());
      }

 

    /**
     * Makes a copy of this object.
     * It creates a new object filling in the simple attributes.
       * It then fills all the association collections and sets the
     * related objects to isNew=true.
       */
      public User copy() throws TorqueException
    {
        return copyInto(new User());
    }
  
    protected User copyInto(User copyObj) throws TorqueException
    {
          copyObj.setUserId(userId);
          copyObj.setFullName(fullName);
          copyObj.setUsername(username);
          copyObj.setPassword(password);
          copyObj.setEmailId(emailId);
          copyObj.setDateOfBirth(dateOfBirth);
          copyObj.setPhoneNumber(phoneNumber);
          copyObj.setAddress(address);
          copyObj.setPostcode(postcode);
          copyObj.setCity(city);
          copyObj.setState(state);
          copyObj.setCountry(country);
          copyObj.setQuota(quota);
          copyObj.setCreatedOn(createdOn);
          copyObj.setLastLogine(lastLogine);
  
                    copyObj.setUserId(0);
                                                                                                
                                      
                
        List v = getUserRoles();
        for (int i = 0; i < v.size(); i++)
        {
            UserRole obj = (UserRole) v.get(i);
            copyObj.addUserRole(obj.copy());
        }
                    
        return copyObj;
    }

    /**
     * returns a peer instance associated with this om.  Since Peer classes
     * are not to have any instance attributes, this method returns the
     * same instance for all member of this class. The method could therefore
     * be static, but this would prevent one from overriding the behavior.
     */
    public UserPeer getPeer()
    {
        return peer;
    }

    public String toString()
    {
        StringBuffer str = new StringBuffer();
        str.append("User:\n");
        str.append("UserId = ")
           .append(getUserId())
           .append("\n");
        str.append("FullName = ")
           .append(getFullName())
           .append("\n");
        str.append("Username = ")
           .append(getUsername())
           .append("\n");
        str.append("Password = ")
           .append(getPassword())
           .append("\n");
        str.append("EmailId = ")
           .append(getEmailId())
           .append("\n");
        str.append("DateOfBirth = ")
           .append(getDateOfBirth())
           .append("\n");
        str.append("PhoneNumber = ")
           .append(getPhoneNumber())
           .append("\n");
        str.append("Address = ")
           .append(getAddress())
           .append("\n");
        str.append("Postcode = ")
           .append(getPostcode())
           .append("\n");
        str.append("City = ")
           .append(getCity())
           .append("\n");
        str.append("State = ")
           .append(getState())
           .append("\n");
        str.append("Country = ")
           .append(getCountry())
           .append("\n");
        str.append("Quota = ")
           .append(getQuota())
           .append("\n");
        str.append("CreatedOn = ")
           .append(getCreatedOn())
           .append("\n");
        str.append("LastLogine = ")
           .append(getLastLogine())
           .append("\n");
        return(str.toString());
    }
}
