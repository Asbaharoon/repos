<?xml version="1.0" encoding="utf-8"?>
<!--
/**
 * @(#) MajorGroupWiseMeritList.mxml
 * Copyright (c) 2011 EdRP, Dayalbagh Educational Institute.
 * All Rights Reserved.
 *
 * Redistribution and use in source and binary forms, with or
 * without modification, are permitted provided that the following
 * conditions are met:
 *
 * Redistributions of source code must retain the above copyright
 * notice, this  list of conditions and the following disclaimer.
 *
 * Redistribution in binary form must reproducuce the above copyright
 * notice, this list of conditions and the following disclaimer in
 * the documentation and/or other materials provided with the
 * distribution.
 *
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL ETRG OR ITS CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL,SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
 * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Contributors: Members of EdRP, Dayalbagh Educational Institute
 */
-->
<mx:Panel xmlns:mx="http://www.adobe.com/2006/mxml" title="Major Group Wise Merit List" layout="absolute" width="640" height="522"
		 creationComplete="applicationCreationHandler()">
	
	<mx:HTTPService id="getUniversitySessions" method="post"
					url="{commonFunction.getConstants('url')}/degreeList/getUniversitySession.htm"
					resultFormat="e4x" 
					showBusyCursor="true"
					result="resultGetUniversitySession(event)" 
					fault="httpServiceFaultHandler(event)" 
					useProxy="false"/>
				
	<mx:HTTPService id="entityListHttpService" method="POST"
					url="{urlPrefix+'getEntityList.htm'}"
					resultFormat="e4x"
					showBusyCursor="true"
					result="entityListHttpServiceResultHandler(event)"
					fault="httpServiceFaultHandler(event)"
					useProxy="false"/>
					
	<mx:HTTPService id="programListHttpService" method="POST"
					url="{urlPrefix+'getProgramList.htm'}"
					resultFormat="e4x"
					showBusyCursor="true"
					result="programListHttpServiceResultHandler(event)"
					fault="httpServiceFaultHandler(event)"
					useProxy="false"/>	
					
	<mx:HTTPService id="branchListHttpService" method="POST"
					url="{urlPrefix+'branchList.htm'}"
					resultFormat="e4x"
					showBusyCursor="true"
					result="branchListHttpServiceResultHandler(event)"
					fault="httpServiceFaultHandler(event)"
					useProxy="false"/>
					
	<mx:HTTPService id="specializationListHttpService" method="POST"
					url="{urlPrefix+'specializationList.htm'}"
					resultFormat="e4x"
					showBusyCursor="true"
					result="specializationListHttpServiceResultHandler(event)"
					fault="httpServiceFaultHandler(event)"
					useProxy="false"/>
					
	<mx:HTTPService id="generatePDFHttpService" method="POST"
					url="{urlPrefix+'generatePDF.htm'}"
					resultFormat="e4x"
					showBusyCursor="true"
					result="generatePDFHttpServiceResultHandler(event)"
					fault="httpServiceFaultHandler(event)"
					useProxy="false"/>		
										
	<!--
	<mx:HTTPService id="semesterListHttpService" method="POST"
					url="{urlPrefix+'semesterList.htm'}"
					resultFormat="e4x"
					showBusyCursor="true"
					result="semesterListHttpServiceResultHandler(event)"
					fault="httpServiceFaultHandler(event)"
					useProxy="false"/>
	
	<mx:HTTPService id="courseGroupListHttpService" method="POST"
					url="{urlPrefix+'courseGroupList.htm'}"
					resultFormat="e4x"
					showBusyCursor="true"
					result="courseGroupListHttpServiceResultHandler(event)"
					fault="httpServiceFaultHandler(event)"
					useProxy="false"/>
	-->
	
	<mx:Script>
		<![CDATA[
			import mx.managers.PopUpManager;
			import common.Mask;
			import common.commonFunction;
			import mx.events.CloseEvent;
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.controls.LinkButton;
			import mx.events.ListEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import reportgeneration.DisplayPDF;
			
			[Bindable]var tempButton:LinkButton=new LinkButton;
			[Bindable]protected var urlPrefix:String;
			[Embed(source="/images/error.png")]private var errorIcon:Class;
			[Embed(source="/images/success.png")]private var successIcon:Class;
			[Embed(source="/images/warning.png")]private var warningIcon:Class;
			[Embed(source="/images/question.png")]private var questionIcon:Class;
			[Embed(source="/images/infoIcon.png")]private var infoIcon:Class;
						
			protected var sessionXML:XML;
			protected var sessionAC:ArrayCollection;
			protected var entityListXML:XML;
			protected var programListXml:XML
			protected var branchList:XML;
			protected var specializationList:XML;
			protected var groupAC:ArrayCollection;
			public var UName:String;
			protected var startDate:String;
			protected var endDate:String;
			protected var entityId:String;
			protected var programId:String;
			protected var branchId:String;
			protected var specId:String;
			protected var downloadPath:String;
//			protected var programCourseKeyList:XML;
//			protected var courseGroupList:XML;
//			protected var semesterList:XML;
//			protected var semesterListArrCol:ArrayCollection;
//			protected var selectedSemesterArrColl:ArrayCollection;
			
			
			protected function applicationCreationHandler():void{
				urlPrefix=commonFunction.getConstants('url')+"/reports/";
				getUniversitySessions.send([new Date]);
			}
			
			protected function resultGetUniversitySession(event:ResultEvent):void{
				sessionXML=event.result as XML;
				sessionAC=new ArrayCollection;
				for each(var obj:Object in sessionXML.role){
					var sessionStartDate:String = obj.id.toString();
					var year:String = sessionStartDate.substr(0,4);
					var sessionEndDate:String = obj.description.toString();
					var endYear:String = sessionEndDate.substr(0,4);
					sessionAC.addItem({select:false,id:year,description:endYear});		
				}
				fromYearCombo.dataProvider = sessionAC;
				fromYearCombo.labelField = "id";
			}
			
			protected function onYearChange():void{
				for each(var obj:Object in sessionAC){		
					if(fromYearCombo.selectedLabel == obj.id){			
					toYearCombo.text = obj.description;			
					}		
				}
				toYearCombo.visible = true;
				entityListHttpService.send([new Date]);
			}
			
			protected function entityListHttpServiceResultHandler(event:ResultEvent):void{
				entityListXML = event.result as XML;
				if(entityListXML.sessionConfirm == true){
	        		Alert.show(commonFunction.getMessages('sessionInactive'),commonFunction.getMessages('error'), 4, null,null,errorIcon);
	        		this.parentDocument.vStack.selectedIndex=0;
					this.parentDocument.loaderCanvas.removeAllChildren();
        		}
        		entityCB.enabled=true;
        		entityCB.dataProvider=entityListXML.entity.entityName;	
			}
			
			protected function entityCBChangeHandler():void{
				var param:Object=new Object();
				param["time"]=new Date();
				param["entityId"]=entityListXML.entity.(entityName==entityCB.selectedLabel).entityId;				
				programListHttpService.send(param);				
//				programCB.selectedIndex=-1;
//				branchCB.selectedIndex=-1;
//				specializationCB.selectedIndex=-1;
//				semesterGrid.dataProvider=null;
//				courseGroupCB.selectedIndex=-1;
//				courseGroupCB.enabled=false;
//				generateReportButton.enabled=false;					
			}
			
			protected function programListHttpServiceResultHandler(event:ResultEvent):void{
				programListXml=event.result as XML;
				if(programListXml.sessionConfirm == true){
	        		Alert.show(commonFunction.getMessages('sessionInactive'),commonFunction.getMessages('error'), 4, null,null,errorIcon);
	        		this.parentDocument.vStack.selectedIndex=0;
					this.parentDocument.loaderCanvas.removeAllChildren();
        		}
        		programCB.enabled=true;
				programCB.dataProvider=programListXml.program.programName;
			}
			
			protected function programCBChangeHandler():void
			{
				var param:Object=new Object();
				param["entityId"]=entityListXML.entity.(entityName==entityCB.selectedLabel).entityId;
				param["programId"]=programListXml.program.(programName==programCB.selectedLabel).programId;
				branchListHttpService.send(param);
//				semesterGrid.dataProvider=null;
//				courseGroupCB.selectedIndex=-1;
//				courseGroupCB.enabled=false;
//				generateReportButton.enabled=false;
			}
			
			protected function branchListHttpServiceResultHandler(event:ResultEvent):void{
				branchList = event.result as XML;
				if(branchList.sessionConfirm == true){
	        		Alert.show(commonFunction.getMessages('sessionInactive'),commonFunction.getMessages('error'), 4, null,null,errorIcon);
	        		this.parentDocument.vStack.selectedIndex=0;
					this.parentDocument.loaderCanvas.removeAllChildren();
        		}
        		branchCB.enabled=true;
				branchCB.dataProvider=branchList.branch.branchName;
			}
			
			protected function branchCBChangeHandler():void
			{
				var param:Object=new Object();
				param["entityId"]=entityListXML.entity.(entityName==entityCB.selectedLabel).entityId;
				param["programId"]=programListXml.program.(programName==programCB.selectedLabel).programId;
				param["branchId"]=branchList.branch.(branchName==branchCB.selectedLabel).branchId;
				specializationListHttpService.send(param);
//				semesterGrid.dataProvider=null;
//				courseGroupCB.selectedIndex=-1;
//				courseGroupCB.enabled=false;
//				generateReportButton.enabled=false;
			}
			
			protected function specializationListHttpServiceResultHandler(event:ResultEvent):void{
				specializationList = event.result as XML;
				if(specializationList.sessionConfirm == true){
	        		Alert.show(commonFunction.getMessages('sessionInactive'),commonFunction.getMessages('error'), 4, null,null,errorIcon);
	        		this.parentDocument.vStack.selectedIndex=0;
					this.parentDocument.loaderCanvas.removeAllChildren();
        		}
				specializationCB.enabled=true;
				specializationCB.dataProvider=specializationList.specialization.specializationName;
			}
			
			protected function specializationCBChangeHandler():void
			{
				groupCanvas.visible=true;
//				var param:Object=new Object();
//				param["programId"]=programListXml.program.(programName==programCB.selectedLabel).programId;
//				semesterListHttpService.send(param);
//				courseGroupCB.selectedIndex=-1;
//				courseGroupCB.enabled=false;
//				generateReportButton.enabled=false;
			}
			
			protected function generateReportButtonClickHandler():void{
				startDate=sessionXML.role.(id.toString().substr(0,4)==fromYearCombo.selectedLabel).id;
				endDate=sessionXML.role.(description.toString().substr(0,4)==toYearCombo.text).description;
				entityId=entityListXML.entity.(entityName==entityCB.selectedLabel).entityId;
				programId=programListXml.program.(programName==programCB.selectedLabel).programId;
				branchId=branchList.branch.(branchName==branchCB.selectedLabel).branchId;
				specId=specializationList.specialization.(specializationName==specializationCB.selectedLabel).specializationId;
				var param:Object = new Object(); 
				param["entityId"]=entityListXML.entity.(entityName==entityCB.selectedLabel).entityId;
				param["programId"]=programListXml.program.(programName==programCB.selectedLabel).programId;
				param["branchId"]=branchList.branch.(branchName==branchCB.selectedLabel).branchId;
				param["specializationId"]=specializationList.specialization.(specializationName==specializationCB.selectedLabel).specializationId;
				param["sessionStartDate"]=sessionXML.role.(id.toString().substr(0,4)==fromYearCombo.selectedLabel).id;
				param["sessionEndDate"]=sessionXML.role.(description.toString().substr(0,4)==toYearCombo.text).description;	
				if(group1.text.length > 0){
					param["group1"]=group1.text;
					param["group2"]=group2.text;
					param["group3"]=group3.text;
					param["group4"]=group4.text;
					param["group5"]=group5.text;
//					param["selectedSemester"]=selectedSemesterArrColl;
//					param["courseGroup"]=courseGroupCB.selectedItem;			
					generatePDFHttpService.send(param);
				}else{
					Alert.show('Group 1 is Mandatory',commonFunction.getMessages('error'), 4, null,null,errorIcon);
				}
			}
			
			protected function generatePDFHttpServiceResultHandler(event:ResultEvent):void{
				var serviceResult:XML= event.result as XML;
				var message:String=serviceResult.result.message;
				var status:String=message.substring(0,7);
				downloadPath=message.substring(7,message.length);			
				if(serviceResult.sessionConfirm == true){
	        		Alert.show(commonFunction.getMessages('sessionInactive'),commonFunction.getMessages('error'), 4, null,null,errorIcon);
	        		this.parentDocument.vStack.selectedIndex=0;
					this.parentDocument.loaderCanvas.removeAllChildren();
        		}
				if(serviceResult.result.message=="studentsNotFound"){
					Alert.show(commonFunction.getMessages('studentNotExist'),(commonFunction.getMessages('success')),4,null,null,warningIcon);	
				}
				else if(status=="success"){
					Alert.noLabel="Print";
					Alert.yesLabel="Download";
					Alert.buttonWidth=95;
					Alert.show('Report Generated Successfully',(commonFunction.getMessages('success')),(1|2|4),null,downloadPdf,successIcon);
				}
				else{
					Alert.show(commonFunction.getMessages('problemInService'),(commonFunction.getMessages('error')),4,null,null,errorIcon);	
				}
			}
			
			protected function downloadPdf(event:CloseEvent):void{
				if(event.detail==Alert.YES){
					var file:FileReference=new FileReference;
					file.download(new URLRequest(commonFunction.getConstants('url')+downloadPath));
					Alert.show(commonFunction.getMessages('downloadSuccess'),commonFunction.getMessages('success'),4,null,null,successIcon);
					resetButtonClickHandler();
				}else
				if(event.detail==Alert.NO){
					var displayPDF:DisplayPDF = DisplayPDF(PopUpManager.createPopUp(this,DisplayPDF,true));
					displayPDF.iFr.source = commonFunction.getConstants('url')+downloadPath;
					PopUpManager.centerPopUp(displayPDF);
					displayPDF.isPopUp=false;	
					resetButtonClickHandler();
				}else{
					resetButtonClickHandler();
				}
			}
			
			protected function generateEnable():void{
				if(group1.text.length==0){
					generateReportButton.enabled=false;
				}else{
					generateReportButton.enabled=true;
				}
			}
			

			
			protected function resetButtonClickHandler():void
			{
				fromYearCombo.selectedIndex=-1;
				toYearCombo.text='';
				entityCB.selectedIndex=-1;
				programCB.selectedIndex=-1;
				branchCB.selectedIndex=-1;
				specializationCB.selectedIndex=-1;				
				entityCB.enabled=false;
				programCB.enabled=false;
				branchCB.enabled=false;
				specializationCB.enabled=false;
				generateReportButton.enabled=false;
				groupCanvas.visible=false;
				group1.text='';
				group2.text='';
				group3.text='';
				group4.text='';
				group5.text='';
//				semesterGrid.dataProvider=null;
//				courseGroupCB.selectedIndex=-1;
//				courseGroupCB.enabled=false;
			}
			
			protected function httpServiceFaultHandler(event:FaultEvent):void{
				Alert.show(commonFunction.getMessages('problemInService'),(commonFunction.getMessages('error')),4,null,null,errorIcon);
			}
		
		
			
//			protected function courseGroupListHttpServiceResultHandler(event:ResultEvent):void{
//				courseGroupList = event.result as XML;
//				Mask.close();
//				if(courseGroupList.sessionConfirm == true){
//	        		Alert.show(commonFunction.getMessages('sessionInactive'),commonFunction.getMessages('error'), 4, null,null,errorIcon);
//	        		this.parentDocument.vStack.selectedIndex=0;
//					this.parentDocument.loaderCanvas.removeAllChildren();
//        		}
//        		
//        		if(String(courseGroupList).length==0){
//        			Alert.show(commonFunction.getMessages('courseGroupNotFound'),commonFunction.getMessages('info'),4,null,null,infoIcon);
//        		}
//				
//				courseGroupCB.dataProvider=courseGroupList.courseGroup.group;
//				courseGroupCB.enabled=true;
//			}
			
//			protected function semesterListHttpServiceResultHandler(event:ResultEvent):void{
//				semesterList = event.result as XML;
//				Mask.close();
//				if(semesterList.sessionConfirm == true){
//	        		Alert.show(commonFunction.getMessages('sessionInactive'),commonFunction.getMessages('error'), 4, null,null,errorIcon);
//	        		this.parentDocument.vStack.selectedIndex=0;
//					this.parentDocument.loaderCanvas.removeAllChildren();
//        		}
//				
//				semesterListArrCol= new ArrayCollection();
//				for each (var o:Object in semesterList.semester)
//				{
//					semesterListArrCol.addItem({select:true,id:o.id, name:o.name});
//				}
//				
//				semesterGrid.dataProvider=semesterListArrCol;
//			}
			
//			protected function okButtonClickHandler(event:MouseEvent):void
//			{
//				var gridData:ArrayCollection=commonFunction.getSelectedRowData(semesterGrid);
//				selectedSemesterArrColl=new ArrayCollection();
//				
//				for each(var o:Object in gridData){
//					selectedSemesterArrColl.addItem([o.id]);
//				}
//				var param:Object=new Object();
//				param["programId"]=programListXml.program.(programName==programCB.selectedLabel).programId;
//				param["branchId"]=branchList.branch.(branchName==branchCB.selectedLabel).branchId;
//				param["specializationId"]=specializationList.specialization.(specializationName==specializationCB.selectedLabel).specializationId;
//				param["selectedSemester"]=selectedSemesterArrColl;
//				courseGroupListHttpService.send(param);
//				Mask.show(commonFunction.getMessages('pleaseWait'));
//			}
			
//			protected function courseGroupCBChangeHandler():void
//			{
//				generateReportButton.enabled=true;
//			}			

		]]>
	</mx:Script>
	
	<mx:Label x="36" y="51" text="{commonFunction.getConstants('session')}:"/>
	<mx:ComboBox x="125" y="48" id="fromYearCombo" width="85" selectedIndex="-1" prompt="Select" change="onYearChange()"></mx:ComboBox>
	
	<mx:Label x="231" y="51" id="toYearCombo" width="54"/>
	
	<mx:Label x="37" y="88" text="{commonFunction.getConstants('entity')}:"/>
	<mx:ComboBox x="125" y="85" id="entityCB" width="160" enabled="false" prompt="Select" selectedIndex="-1" change="entityCBChangeHandler()" toolTip="{entityCB.text}"/>
	
	<mx:Label x="317" y="88" text="{commonFunction.getConstants('program')}:"/>
	<mx:ComboBox x="427" y="85" id="programCB" width="160" enabled="false" prompt="Select" selectedIndex="-1" change="programCBChangeHandler()" toolTip="{programCB.text}"/>
		
	<mx:Label x="37" y="126" text="{commonFunction.getConstants('branch')}:"/>
	<mx:ComboBox x="125" y="123" id="branchCB" width="160" enabled="false" prompt="Select" selectedIndex="-1" change="branchCBChangeHandler()" toolTip="{branchCB.text}"/>
	
	<mx:Label x="317" y="126" text="{commonFunction.getConstants('specialization')}:"/>
	<mx:ComboBox x="427" y="123" width="160" id="specializationCB" enabled="false" prompt="Select" selectedIndex="-1" change="specializationCBChangeHandler()" toolTip="{specializationCB.text}"/>
	
	<mx:Button x="84" y="415" id="generateReportButton" enabled="false" label="Generate" click="generateReportButtonClickHandler()"/>
	<mx:Button x="275" y="415" id="resetButton" label="Reset" click="resetButtonClickHandler()" width="70"/>
	<mx:Button x="455" y="415" label="Cancel" click="this.parentDocument.loaderCanvas.removeAllChildren();" width="82"/>

	
	<mx:Canvas x="166.5" y="173" width="287" height="217" styleName="SimpleCanvas" id="groupCanvas" visible="false">
		<mx:Label x="10" y="52" text="Group 1* :"/>
		<mx:Label x="10" y="86" text="Group 2   :"/>
		<mx:Label x="10" y="118" text="Group 3   :"/>
		<mx:Label x="10" y="150" text="Group 4   :"/>
		<mx:Label x="10" y="182" text="Group 5   :"/>
		<mx:TextInput x="116" y="52" id="group1" change="generateEnable()"/>
		<mx:TextInput x="116" y="84" id="group2"/>
		<mx:TextInput x="116" y="116" id="group3"/>
		<mx:TextInput x="116" y="148" id="group4"/>
		<mx:TextInput x="116" y="180" id="group5"/>
		<mx:Label x="10" y="13" text="Please Enter Groups :" fontFamily="Georgia" fontWeight="bold" textDecoration="normal"/>
	
	</mx:Canvas>

<!--Code Commented By Dheeraj : There is no need to select semesters and groups-->	
<!--
	<mx:Label x="60" y="177" text="{commonFunction.getConstants('semester')}:"/>
	<mx:Canvas styleName="SimpleCanvas" x="146" y="168" width="200" height="164">
		<mx:DataGrid x="6" y="10" id="semesterGrid" allowMultipleSelection="true" width="188" height="108" 
					 visible="true" resizableColumns="true" sortableColumns="true" verticalScrollPolicy="on" 
					 horizontalScrollPolicy="off" draggableColumns="false" editable="true">
			<mx:columns>
				<mx:DataGridColumn rendererIsEditor="true" resizable="false" width="30" textAlign="center" sortable="false" editorDataField="selected" dataField="select" headerText=" ">
					<mx:itemRenderer>
						<mx:Component>
							<mx:CheckBox change="commonFunction.editDeleteEnable(event,outerDocument.semesterGrid,[],[outerDocument.tempButton])">
								<mx:Script>
								<![CDATA[
									import common.commonFunction;
									
									import mx.controls.LinkButton;
								]]>
							</mx:Script>
							</mx:CheckBox>
						</mx:Component>
					</mx:itemRenderer>
				</mx:DataGridColumn>
				<mx:DataGridColumn editable="false" dataField="name" headerText="{commonFunction.getConstants('semesters')}" width="230"/>			
			</mx:columns>
		</mx:DataGrid>
		<mx:Button enabled="{tempButton.enabled}" x="78.5" y="126" id="okButton" label="OK" click="okButtonClickHandler(event)"/>
	</mx:Canvas>
	<mx:Label x="37" y="351" text="{commonFunction.getConstants('courseGroup')}:"/>
	<mx:ComboBox x="146" y="349" id="courseGroupCB" prompt="{commonFunction.getConstants('select')}" selectedIndex="-1" enabled="false" width="160" 
		change="courseGroupCBChangeHandler()" toolTip="{courseGroupCB.text}"/>
-->
</mx:Panel>
