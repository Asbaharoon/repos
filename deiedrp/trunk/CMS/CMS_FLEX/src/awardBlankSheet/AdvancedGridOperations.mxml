<?xml version="1.0" encoding="utf-8"?>
<!--
/**
 * @(#) AdvancedGridOperations.mxml
 * Copyright (c) 2011 EdRP, Dayalbagh Educational Institute.
 * All Rights Reserved.
 *
 * Redistribution and use in source and binary forms, with or
 * without modification, are permitted provided that the following
 * conditions are met:
 *
 * Redistributions of source code must retain the above copyright
 * notice, this  list of conditions and the following disclaimer.
 *
 * Redistribution in binary form must reproducuce the above copyright
 * notice, this list of conditions and the following disclaimer in
 * the documentation and/or other materials provided with the
 * distribution.
 *
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL ETRG OR ITS CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL,SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
 * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Contributors: Members of EdRP, Dayalbagh Educational Institute
 */
 -->
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" width="400" height="300">
	<mx:Metadata>
		[ResourceBundle("Messages")]
		[ResourceBundle("Constants")]
	</mx:Metadata>
	<mx:Script>
		<![CDATA[
			import mx.controls.AdvancedDataGrid;
			import mx.managers.CursorManager;
			import mx.controls.LinkButton;
			import mx.controls.Button;
			import mx.collections.ArrayCollection;
			import mx.collections.XMLListCollection;
			import mx.resources.*;
			import mx.controls.Alert;

			/** This function return selected rows data of Grid * */
			public static function getSelectedRowData(dataGrid:AdvancedDataGrid):ArrayCollection
            {
                var arrayCollection:ArrayCollection=new ArrayCollection()
		    
	            for each(var obj:Object in dataGrid.dataProvider)
	            {
	                if(obj.select==true)
		            {
		                var temp:Array=new Array;
		                for(var i:String in obj)
		                {
		    	            temp[i]=obj[i];
		                }
		                arrayCollection.addItem(temp);
		            }
	            }
	            return arrayCollection;
            }
            
             /** This function return rows data of Advanced Data Grid * */
			public static function getAdvancedDataGridRowData(dataGrid:AdvancedDataGrid):ArrayCollection
            {
                var arrayCollection:ArrayCollection=new ArrayCollection()
		    
	            for each(var obj:Object in dataGrid.dataProvider)
	            {
	                var temp:Array=new Array;
		            for(var i:String in obj)
		            {
		            	if(i!='mx_internal_uid')
		            	{
		    	            temp[i]=obj[i];
		    	        }
		            }
		            arrayCollection.addItem(temp);
	            }
	            return arrayCollection;
            }
            
            /** This function enable disable edit delete button according to selected number of records * */
			public static function editDeleteEnable(event:Event,grid:AdvancedDataGrid,editButtonArray:Array,deleteButtonArray:Array):void
		    {
		        var currentIndex:int=grid.selectedIndex;
		        var parseIndex:int=0;
		        var i:int=0;
		        for each(var obj:Object in grid.dataProvider)
		        {
		            var bool:Boolean=false;
		            bool=obj.select;
		            if(parseIndex==currentIndex)
		            {
		            	bool=event.currentTarget.selected;
		            }
		            if(bool)
		            {
		            	i++;
		            }
		            parseIndex++;
		        }

                if(i>0)
		        {
		            if(i==1)
		            {
		            	setButtonStatus(editButtonArray,true);
		        	    setButtonStatus(deleteButtonArray,true);
		            }
		            else
		            {
		        	    setButtonStatus(editButtonArray,false);
		        	    setButtonStatus(deleteButtonArray,true);
		            }
		        }
		        else
		        {
		            setButtonStatus(editButtonArray,false);
		        	setButtonStatus(deleteButtonArray,false);
		        }
		    }
		    
		    private static function setButtonStatus(buttonArray:Array,status:Boolean):void
		    {
		    	for each(var button:LinkButton in buttonArray)
		    	{
		    		button.enabled=status;
		    	}
		    }
		    
		    public static function selectAll(event:Event,grid:AdvancedDataGrid,editButtonArray:Array,deleteButtonArray:Array):void
		    {
		    	var tempDataProvider:ArrayCollection=new ArrayCollection();
		    	for each(var obj:Object in grid.dataProvider as ArrayCollection)
		    	{
		    		obj.select=event.target.selected;
		    		tempDataProvider.addItem(obj);
		    	}
		    	grid.dataProvider=tempDataProvider;
		    	AdvancedGridOperations.editDeleteEnable(event,grid,editButtonArray,deleteButtonArray);
		    }
		]]>
	</mx:Script>
</mx:Canvas>