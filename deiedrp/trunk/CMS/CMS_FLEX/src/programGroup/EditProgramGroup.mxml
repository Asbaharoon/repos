<?xml version="1.0" encoding="utf-8"?>
<!--
/**
 * @(#) EditProgramGroup.mxml
 * Copyright (c) 2011 EdRP, Dayalbagh Educational Institute.
 * All Rights Reserved.
 *
 * Redistribution and use in source and binary forms, with or
 * without modification, are permitted provided that the following
 * conditions are met:
 *
 * Redistributions of source code must retain the above copyright
 * notice, this  list of conditions and the following disclaimer.
 *
 * Redistribution in binary form must reproducuce the above copyright
 * notice, this list of conditions and the following disclaimer in
 * the documentation and/or other materials provided with the
 * distribution.
 *
 *
 * THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
 * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED.  IN NO EVENT SHALL ETRG OR ITS CONTRIBUTORS BE LIABLE
 * FOR ANY DIRECT, INDIRECT, INCIDENTAL,SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT
 * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR
 * BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE
 * OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * Contributors: Members of EdRP, Dayalbagh Educational Institute
 */
-->
<mx:TitleWindow xmlns:mx="http://www.adobe.com/2006/mxml" layout="absolute" width="492" height="394" title="{commonFunction.getConstants('editButton')}"
	showCloseButton="true" close="popUpWindowClose();" creationComplete="popupWindowInitializeHandler()" styleName="PopUpTitleWindow">
	
	<mx:HTTPService id="updateDetailsHttpServices" method="POST"
					url="{urlPrefix+'updateDetails.htm '}"
					resultFormat="e4x"
					showBusyCursor="true"
					result="updateDetailsHttpServicesResultHandler(event)"
					fault="httpServiceFaultHandler(event)"
					useProxy="false"/>
					
									
	
	<mx:Script>
		<![CDATA[
			import common.Mask;
			import common.commonFunction;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			[Bindable]public var urlPrefix:String;
			private var subGroupList:XML;
			private var subGroupArrCol:ArrayCollection;
			public var groupCode:String;
			public var subgroupCode:String;
			public var conditonalGroup:String;
			public var programCourseKey:String;
			public var refreshProgramGroupGrid:Function;
			
			[Embed(source="/images/error.png")]private var errorIcon:Class;
			[Embed(source="/images/success.png")]private var successIcon:Class;
			[Embed(source="/images/reset.png")]private var resetIcon:Class;
			[Embed(source="/images/question.png")]private var questionIcon:Class;
			
			[Bindable]public var condition:XML=<root>
													<element>
														<status name="Yes" code="Y"/>											
													</element>
													<element>
														<status name="No" code="N"/>											
													</element>
												</root>;
			
			
			/**
			 * @protected
			 * this method is called on initilize the popUp window.
			 */
        	protected function popupWindowInitializeHandler():void
        	{
        		urlPrefix=commonFunction.getConstants('url')+"/programgroup/";
        		var param:Object=new Object();
        		param["time"]=new Date();

        		
        		conditionalGroupCB.dataProvider=condition.element.status.@name;
        		conditionalGroupCB.selectedItem=conditonalGroup;
  
        	}
			
			/**
			 * @private
			 * This function will called on sucess http service 
			 * @return void 
			 */
			private function updateDetailsHttpServicesResultHandler(event:ResultEvent):void{
				var saveResult:XML= event.result as XML;
				if(saveResult.sessionConfirm == true){
	        		Alert.show(commonFunction.getMessages('sessionInactive'),commonFunction.getMessages('error'), 4, null,null,errorIcon);
	        		this.parentDocument.vStack.selectedIndex=0;
					this.parentDocument.loaderCanvas.removeAllChildren();
        		}
								
				if(String(saveResult.result.message).search("success")>-1){
					Alert.show(String(saveResult.result.message).slice(7)+" "+commonFunction.getMessages('recordUpdatedSuccessfully'),(commonFunction.getMessages('success')),4,null,null,successIcon);
					refreshProgramGroupGrid.call();	
					popUpWindowClose();
				}
				//added by ashish mohan 
				else if(String(saveResult.result.message).search("failure")>-1){
				Alert.show("Error occured \n Details are as follows: \n"+String(saveResult.result.message)  ,resourceManager.getString('Messages','error'),4,null,null,errorIcon);	
					refreshProgramGroupGrid.call();	
					popUpWindowClose();
				}
				else if(int(String(saveResult.result.message).slice(7))==0){
				Alert.show(resourceManager.getString('Messages','recordNotUpdate'),resourceManager.getString('Messages','error'),4,null,null,errorIcon);	
					refreshProgramGroupGrid.call();	
					popUpWindowClose();
				}
				else{
					Alert.show(commonFunction.getMessages('problemInService'),(commonFunction.getMessages('error')),4,null,null,errorIcon);	
				}
				Mask.close();
			}
			

			
			/**
			 * @private
			 * This function will called to close popup window 
			 * @return void 
			 */
        	private function popUpWindowClose():void
        	{
				PopUpManager.removePopUp(this);
        	}
        	
        	/**
			 * @private
			 * This function will called on update button clicked 
			 * @return void 
			 */
        	private function updateButtonClickHandler():void{
        		var param:Object=new Object();
        		param["programCourseKey"]=programCourseKey;
        		param["groupCode"]=groupCode;
        		param["groupOrder"]=groupOrderNS.value;
        		param["minimumSelection"]=minimumSelectionNS.value;
        		param["maximumSelection"]=maximumSelectionNS.value;
        		param["conditionalGroup"]=condition.element.status.(@name==conditionalGroupCB.selectedLabel).@code;
				updateDetailsHttpServices.send(param);
        	}
        	
        	/**
			 * @private
			 * this method is called when a fault occur from the server. 
			 * @param event a Fault event object.
			 */
			private function httpServiceFaultHandler(event:FaultEvent):void{
				Alert.show(commonFunction.getMessages('problemInService'),(commonFunction.getMessages('error')),4,null,null,errorIcon);
				Mask.close();
			}
			
		]]>
	</mx:Script>
	
	<mx:Label x="133.5" y="30" text="{commonFunction.getConstants('group')}:"/>
	<mx:Label x="198.5" y="28" id="groupLabel" width="160"/>
	<mx:Label x="107.5" y="67" text="{commonFunction.getConstants('groupOrder')}:"/>
	<mx:NumericStepper x="198" y="65" id="groupOrderNS" width="160.5" enabled="false"/>
	<mx:Label x="65.5" y="107" text="{commonFunction.getConstants('minimumSelection')}:"/>
	<mx:NumericStepper x="198" y="105" id="minimumSelectionNS" width="160.5"/>
	<mx:Label x="61.5" y="147" text="{commonFunction.getConstants('maximumSelection')}:"/>
	<mx:NumericStepper x="198" y="145" id="maximumSelectionNS" width="160.5"/>
	<mx:Label x="70.5" y="188" text="{commonFunction.getConstants('conditionalGroup')}:"/>
	<mx:ComboBox x="198.5" y="186" id="conditionalGroupCB" selectedIndex="-1" prompt="{commonFunction.getConstants('select')}" width="160.5"/>
	<mx:Button x="143.5" y="300" label="{commonFunction.getConstants('updateButton')}" click="updateButtonClickHandler()"/>
	<mx:Button x="281.5" y="300" label="{commonFunction.getConstants('cancelButton')}" click="popUpWindowClose()"/>
</mx:TitleWindow>
