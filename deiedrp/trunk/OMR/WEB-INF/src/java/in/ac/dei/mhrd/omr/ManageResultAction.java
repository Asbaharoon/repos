/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package in.ac.dei.mhrd.omr;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.text.SimpleDateFormat;
import java.util.Locale;
import java.util.ResourceBundle;

import in.ac.dei.mhrd.omr.img.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;

import org.apache.log4j.Logger;
import org.apache.log4j.PropertyConfigurator;
import org.apache.log4j.xml.DOMConfigurator;

/** 
 * MyEclipse Struts
 * Creation date: 12-02-2010
 * @author Anshul Agarwal
 * XDoclet definition:
 * @struts.action path="/manageResult" name="resultSchedule" input="/manageResult.jsp" scope="request" validate="true"
 * 
 * This class updates the duration for which result will be displayed 
 */
public class ManageResultAction extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 * This method updates the ResultDisplayedFrom and ResultDisplayedTo fields of the testheader table 
	 */
	private static Logger log = Logger.getLogger(ManageResultAction.class);

	
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		ResultManageForm resultSchedule = (ResultManageForm) form;// TODO Auto-generated method stub
		int testid = SelectTestId.getTestId(resultSchedule.getTestname());
		System.out.println("from : " + resultSchedule.getTestname());
		Connection  con=null;
		PreparedStatement psUpdateResultPeriod = null;
		Locale obj = new Locale("en", "US");
		ResourceBundle message = ResourceBundle.getBundle("in//ac//dei//mhrd//omr//ApplicationResources", obj);

		try{
			/*
			 * Converts date into timestamp
			 */
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd"); 
			
		       java.util.Date ResultDisplayedFrom =  sdf.parse(resultSchedule.getResultFrom()); 
		       java.util.Date ResultDisplayedTo =  sdf.parse(resultSchedule.getResultTo());
				java.sql.Timestamp timest = new java.sql.Timestamp(ResultDisplayedFrom.getTime()); 

			
			
			 con= Connect.prepareConnection();
			 con.setAutoCommit(false);
			 psUpdateResultPeriod = con.prepareStatement("Update testheader set ResultDisplayedFrom=?, ResultDisplayedTo=? where TestId=?");
			 psUpdateResultPeriod.setTimestamp(1, new java.sql.Timestamp(ResultDisplayedFrom.getTime()));
			 psUpdateResultPeriod.setTimestamp(2, new java.sql.Timestamp(ResultDisplayedTo.getTime()));
			 psUpdateResultPeriod.setInt(3, testid);
			 int checkUpdate = psUpdateResultPeriod.executeUpdate();
			 con.commit();
			 con.close();
			 
			 /*
			  * check whether testheader table updated successfully or not
			  */
			 if(checkUpdate>=1){
				request.setAttribute("confirmAnsMsg", message.getString("msg.updateResultDuration"));
				log.info("Result duration updated");
				
			 }else{
				 request.setAttribute("confirmAnsMsg", message.getString("error.updateResultDuration"));
					log.error("Result duration cannot updated");
					
			 }
			 
		}catch (Exception e) {
			log.error("Error while updating result duration : " + e);
			// TODO: handle exception
		}
		
		return mapping.findForward("success1");
	}
}