package in.ac.dei.edrp.pms.task;

/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
import in.ac.dei.edrp.pms.dataBaseConnection.MyDataSource;
import in.ac.dei.edrp.pms.viewer.CodeGenerator;
import in.ac.dei.edrp.pms.viewer.checkRecord;
import in.ac.dei.edrp.pms.task.AddingTaskWithUser;
import java.sql.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;


/** 
 * MyEclipse Struts
 * Creation date: 06-25-2009
 * 
 * XDoclet definition:
 * @struts.action input="newtask.jsp" validate="true"
 */
public class TaskAction extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		TaskForm taskform = (TaskForm) form;
		HttpSession session=request.getSession();
				
		String orgportal=(String)session.getAttribute("validOrgInPortal");
				
//		System.out.println("project name="+taskform.getProjectName());
//		System.out.println("task name="+taskform.getTaskName());
//		System.out.println("assigned to="+taskform.getAssignedTo());
//		System.out.println("no of days="+taskform.getNo_of_days());
//		System.out.println("task start date="+taskform.getTaskStartDate());
//		System.out.println("task end date="+taskform.getTaskEndDate());
//		System.out.println("gchart color="+taskform.getGantt_chart_color());
//		System.out.println("dependency="+taskform.getTaskDependency());
		
		request.setAttribute("message","Task creation failed ,because this task already exist.");
		
		Connection con=null;
		String forwardmsg="taskAssignfail";
		String valid_code="";
		try{
			/*
			 * This method Established the connection from the database MySql
			 */
		con=MyDataSource.getConnection();
		String project_code=checkRecord.twoFieldDuplicacyChecker("Project_Code","project",
				"Project_Name",taskform.getProjectName(),"Valid_Org_Inportal",
				orgportal);
		String taskid=checkRecord.twoFieldDuplicacyChecker("Task_Id","task",
				"Task_Name",taskform.getTaskName().trim(),"VProject_Code",project_code);
		if(taskid!=null)
		{
			System.out.println("task already exist.");
			return mapping.findForward("tasksuccess");
		}
		/*
		 * Inserting the record into task table.
		 */
	
	PreparedStatement ps=con.prepareStatement("insert into task (Task_Id,Task_Name,No_of_Days," +
			"Schedule_Start_Date,Schedule_End_Date,GChart_Color,Task_Status,Dependency,"+
			"Description,VProject_Code) values(?,?,?,?,?,?,?,?,?,?)");
	PreparedStatement pst=con.prepareStatement("select max(substr(Task_Id,9)) from task" +
			" where substr(Task_Id,1,8)=?");
	pst.setString(1,project_code.substring(4));
	ResultSet rst=pst.executeQuery();
	rst.next();
	String maxvalue=rst.getString(1);
	if(maxvalue!=null)
	{
		valid_code=CodeGenerator.gettingTaskId(project_code.substring(4),Long.parseLong(maxvalue)+1,4);
	}
	else
		valid_code=CodeGenerator.gettingTaskId(project_code.substring(4),1,4);
	System.out.println("generated task id="+valid_code);
	
		ps.setString(1,valid_code);
		ps.setString(2,taskform.getTaskName().trim());
		ps.setInt(3,taskform.getNo_of_days());
		ps.setString(4,taskform.getTaskStartDate());
		ps.setString(5,taskform.getTaskEndDate());
		ps.setString(6,taskform.getGantt_chart_color());
		ps.setString(7,"Not Completed");
		ps.setString(8,"");
		ps.setString(9,taskform.getRemark());
		ps.setString(10,project_code);
				
		int x=ps.executeUpdate();
		
		taskid=checkRecord.twoFieldDuplicacyChecker("Task_Id","task","Task_Name",
				taskform.getTaskName().trim(),"VProject_Code",project_code);
		//updating the task table when we select dependency
		if(!taskform.getTaskDependency().equals("No"))
		{
		String dependentTaskid=checkRecord.twoFieldDuplicacyChecker("Task_Id","task",
				"Task_Name",taskform.getTaskDependency(),"VProject_Code",project_code);
		PreparedStatement ps1=con.prepareStatement("update task t set t.Dependency=? " +
				"where t.Task_Id=?");
			ps1.setString(1,dependentTaskid);
			ps1.setString(2,taskid);
			ps1.executeUpdate();
		}
		
		//insert the data into task_with_user table when we select assigned to option.
		if(!taskform.getAssignedTo().equals("--Select--"))
		{
			if(AddingTaskWithUser.insertTaskWithUser(taskform.getAssignedTo(),taskid,project_code,orgportal)>0)
			System.out.println("task has been assigned to the selected user.");
		}
		
		if(x>0)
		{
			//response.getWriter().println("One Record has been Successfully Inserted ! ");
			ActionErrors errors = new ActionErrors();
			ActionMessage error = new ActionMessage("msg.task.added");
			errors.add("taskmsg",error);
			saveErrors(request,errors);
			forwardmsg="tasksuccess";
		}
		}
		catch(Exception e)
		{
			System.out.println("error in task action file="+e);
		}
		finally
		{
			MyDataSource.freeConnection(con);
		}
		return mapping.findForward(forwardmsg);
	}

	
	
}