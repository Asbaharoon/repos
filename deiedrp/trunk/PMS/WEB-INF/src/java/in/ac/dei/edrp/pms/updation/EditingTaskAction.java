package in.ac.dei.edrp.pms.updation;
/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
import in.ac.dei.edrp.pms.dataBaseConnection.MyDataSource;
import in.ac.dei.edrp.pms.viewer.checkRecord;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.struts.action.Action;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import java.sql.*;


/** 
 * MyEclipse Struts
 * Creation date: 06-17-2009
 * XDoclet definition:
 * This class is used for editing the desired task.
 * @struts.action path="/go4" name="edittaskform" input="editTask.jsp" scope="request" validate="true"
 */
public class EditingTaskAction extends Action {
	/*
	 * Generated Methods
	 */

	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		EditTaskForm edittaskform = (EditTaskForm) form;// TODO Auto-generated method stub
		HttpSession session=request.getSession();
		String forwardmsg="updationfail";
		Connection con=null;
		try{
			con=MyDataSource.getConnection();
	PreparedStatement ps=con.prepareStatement("update task t set t.Actual_Start_Date=?,"+
				"t.Actual_End_Date=?,t.GChart_Color=?,t.Per_Completed=?,t.Task_Status=?," +
				"t.Dependency=?,t.Description=? where t.Task_Id=?");
		ps.setString(1,edittaskform.getActualStartDate());
		if(!edittaskform.getActualEndDate().equals(""))
			ps.setString(2,edittaskform.getActualEndDate());
		else
			ps.setString(2,null);
		ps.setString(3,edittaskform.getGantt_chart_color());
		ps.setInt(4,Integer.parseInt(edittaskform.getTask_percentage_completion()));
		ps.setString(5,edittaskform.getStatus());
		try
		{
			if(edittaskform.getTaskDependency().equals("No") || edittaskform.getTaskDependency()==null) 
			{
				ps.setString(6,"");
			}
			else
			{
				String dependentTaskid=checkRecord.twoFieldDuplicacyChecker("Task_Id","task",
				"Task_Name",edittaskform.getTaskDependency(),"VProject_Code",edittaskform.getProject_code());
				ps.setString(6,dependentTaskid);
			}
		}
		catch(Exception e1)
		{
			ps.setString(6,"");
		}	
		ps.setString(7,edittaskform.getRemark());
		ps.setString(8,(String)session.getAttribute("taskkey"));
		int n=ps.executeUpdate();
		if(n>0)/*if n is greater than zero it means update operation is successful.*/
		{
			ps=con.prepareStatement("update project p set p.Actual_Start_Date="+
					"(select min(t.actual_start_date) from task t where " +
					"t.vproject_code=?) where p.project_code=?");
			ps.setString(1,(String)session.getAttribute("projectkey"));
			ps.setString(2,(String)session.getAttribute("projectkey"));
			ps.executeUpdate();
			//System.out.println("mytaskquery="+(String)session.getAttribute("mytaskquery"));
			response.sendRedirect((String)session.getAttribute("mytaskquery"));
		}
		
		}
		catch(Exception e)
		{
			System.out.println("error in editing task action file="+e);
		}
		finally
		{
			MyDataSource.freeConnection(con);
		}
		return mapping.findForward(forwardmsg);
		}
	}