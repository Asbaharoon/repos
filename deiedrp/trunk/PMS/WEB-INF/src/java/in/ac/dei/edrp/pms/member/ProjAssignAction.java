/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package in.ac.dei.edrp.pms.member;

import in.ac.dei.edrp.pms.dataBaseConnection.MyDataSource;
import in.ac.dei.edrp.pms.team.AddMemberIntoProject;
import java.sql.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.apache.struts.action.Action;
import org.apache.struts.action.ActionErrors;
import org.apache.struts.action.ActionForm;
import org.apache.struts.action.ActionForward;
import org.apache.struts.action.ActionMapping;
import org.apache.struts.action.ActionMessage;

/** 
 * MyEclipse Struts
 * Creation date: 06-25-2009
 * Modified date: 08-30-2010
 * XDoclet definition:
 * @struts.action input="AssignProject.jsp" validate="true"
 */
public class ProjAssignAction extends Action {
	/*
	 * Generated Methods
	 */
	Connection con=null;
	PreparedStatement ps=null;
	ResultSet rs=null;
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public ActionForward execute(ActionMapping mapping, ActionForm form,
			HttpServletRequest request, HttpServletResponse response) {
		HttpSession session=request.getSession();
		
		ProjAssignForm projassignform = (ProjAssignForm) form;// TODO Auto-generated method stub
		String permitted_By=(String)session.getAttribute("uid");
		String forwardString="assignsuccess";
		String orgportal=(String)session.getAttribute("validOrgInPortal");
		ActionErrors errors = new ActionErrors();
		ActionMessage error = null;
		try{
			request.setAttribute("msginfo","This user is already worked on the selected project.");
			
			error=new ActionMessage("msg.Create_Project_Team_Msg_UserExist.added");
			errors.add("Create_Project_Team_Msg",error);
			saveErrors(request,errors);
			/*
			 * established database connection.
			 * */
			con=MyDataSource.getConnection();
			PreparedStatement check=con.prepareStatement("select v.valid_id from validatetab v," +
					"user_in_org u,project p where v.valid_user_key=u.valid_key" +
					" and u.valid_user_id=? and u.valid_orgportal=?" +
					" and p.project_code=v.valid_project_code and p.project_name=?");
			
			check.setString(1,projassignform.getUserId());
			check.setString(2,orgportal);
			check.setString(3,projassignform.getProjectName());
			//check.setString(4,projassignform.getRoleName());
			rs=check.executeQuery();
			if(!rs.next())//It means the user does not working in the selected project on the selected role.
		    {
				//for adding member into validatetab
				if(AddMemberIntoProject.insertIntoValidatetab(projassignform.getRoleName(),
						projassignform.getUserId(),projassignform.getProjectName(),
						orgportal, permitted_By)>0)
				{
				errors.clear();
				error = new ActionMessage("msg.Create_Project_Team_Msg.added");
				errors.add("Create_Project_Team_Msg",error);
				saveErrors(request,errors);
				}
			}
		}
		catch(Exception e){e.printStackTrace();}

		return mapping.findForward(forwardString);
	}
			
}